AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: A Lambda function triggered by an AWS API Gateway REST APIs call through an Amazon SQS Queue for buffering
Parameters:
  QueueName:
    Description: The queue name for integration with API Gateway
    Type: String
    Default: api-gateway-queue
    
# Comment each resource section to explain usage
Resources:
##########################################################################
#   SQS Queue                                        #
##########################################################################
  # Define the SQS queue
  MySqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref QueueName

##########################################################################
#   Cloudwatch Logs                                                       #
##########################################################################

  MyApiAccessLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      #LogGroupName: MyApi-Access-Logs
      RetentionInDays: 1

##########################################################################
#   Roles                                                               #
##########################################################################
  MyApiRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
      - PolicyName: AllowSqsIntegration
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - 'sqs:SendMessage'
                - 'sqs:GetQueueUrl'
                - 'sqs:SendMessageBatch'
              Resource: !GetAtt MySqsQueue.Arn
            - Effect: Allow
              Action:
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:DescribeLogGroups'
                - 'logs:DescribeLogStreams'
                - 'logs:PutLogEvents'
                - 'logs:GetLogEvents'
                - 'logs:FilterLogEvents'
              Resource: !GetAtt MyApiAccessLogs.Arn

##########################################################################
#   REST API                                                             #
##########################################################################
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: "Rest API SQS Integration"
      StageName: prod
      DefinitionBody:
        swagger: "2.0"
        info:
          version: "2023-02-06T18:36:04Z"
          title: "Rest API SQS Integration"
        #Original Line - host: "b3rhwbmk4k.execute-api.eu-west-1.amazonaws.com"
        host: "${MyApi}.execute-api.${AWS::Region}.amazonaws.com"
        basePath: "/prod"
        schemes:
        - "https"
        paths:
          /sqstestapp:
            x-amazon-apigateway-any-method:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              x-amazon-apigateway-integration:
                credentials:
                  Fn::GetAtt: [MyApiRole, Arn]
                httpMethod: "ANY"
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:sqs:path/082739058874/${QueueName}"
                responses:
                  default:
                    statusCode: "200"
                requestParameters:
                  integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
                requestTemplates:
                  application/json: "Action=SendMessage&MessageBody=$input.body"
                passthroughBehavior: "when_no_templates"
                type: "aws"
        definitions:
          Empty:
            type: "object"
            title: "Empty Schema"

      AccessLogSetting: # Enable access logging with Amazon CloudWatch
        DestinationArn: !GetAtt MyApiAccessLogs.Arn
        Format: >
          {"requestId":"$context.requestId",
          "integration-error":"$context.integration.error",
          "integration-status":"$context.integration.status",
          "integration-latency":"$context.integration.latency",
          "integration-requestId":"$context.integration.requestId",
          "integration-integrationStatus":"$context.integration.integrationStatus",
          "response-latency":"$context.responseLatency",
          "status":"$context.status"}
      #MethodSettings:
      #  - MetricsEnabled: true

##########################################################################
#   Dynamo Table                                                      #
##########################################################################
  teamDDBTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: TeamsTable
      PrimaryKey:
        Name: nickName
        Type: String      

##########################################################################
#   Lambda Function                                                      #
##########################################################################
  SQSLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      #FunctionName: sqs-app
      #Description: Lambda to be invoked by the SQS Queue
      #CodeUri: sqs-test-app
      Handler: sqs-app
      Runtime: go1.x
      Architectures:
        - x86_64
      Timeout: 30
      MemorySize: 512
      Policies:
      - Statement:
        - Sid: SSMDescribeParametersPolicy
          Effect: Allow
          Action:
          - 'dynamodb:DeleteItem'
          - 'dynamodb:GetItem'
          - 'dynamodb:PutItem'
          - 'dynamodb:Scan'
          - 'dynamodb:UpdateItem'
          Resource: !GetAtt teamDDBTable.Arn
      Events:
        MySQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt MySqsQueue.Arn
            BatchSize: 10

##########################################################################
#   Outputs                                                              #
##########################################################################
Outputs:
  MyApiEndpoint:
    Description: "REST API endpoint"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com"

  SQSLambdaFunction:
    Description: SQSLambdaFunction function name
    Value: !Ref SQSLambdaFunction

  MySqsQueueARN:
    Description: SQS queue ARN
    Value: !GetAtt MySqsQueue.Arn

  MySqsQueueURL:
    Description: SQS queue URL
    Value: !Ref MySqsQueue